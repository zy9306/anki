# -*- mode: Org; buffer-read-only: nil; org-download-image-dir: "img"-*-

# local variables:
# eval: (anki-editor-mode +1)
# end:

* 518. Coin Change II
:PROPERTIES:
:ANKI_DECK: leetcode
:ANKI_NOTE_TYPE: Basic
:ANKI_TAGS: algorithm dynamic-programming
:ANKI_NOTE_ID: 1711102206224
:END:

** Front

[[https://leetcode.com/problems/coin-change-ii/][518. Coin Change II]]

You are given an integer array coins representing coins of different
denominations and an integer amount representing a total amount of money.

Return the number of combinations that make up that amount. If that amount of
money cannot be made up by any combination of the coins, return 0.

You may assume that you have an infinite number of each kind of coin.

The answer is guaranteed to fit into a signed 32-bit integer.

 

Example 1:


Input: amount = 5, coins = [1,2,5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1

Example 2:


Input: amount = 3, coins = [2]
Output: 0
Explanation: the amount of 3 cannot be made up just with coins of 2.

Example 3:


Input: amount = 10, coins = [10]
Output: 1

 

Constraints:

- 1 <= coins.length <= 300
- 1 <= coins[i] <= 5000
- All the values of coins are unique.
- 0 <= amount <= 5000


** Back

状态有两个：硬币的种类和金额。

选择：是否选择某个硬币。

dp[i][j] 表示用前 i 个硬币组成金额 j 的组合数。

base case:

- dp[0][j] = 0 即：用 0 个硬币组成金额 j 的组合数为 0
- dp[i][0] = 1 即：用前 i 个硬币组成金额 0 的组合数为 1，即不选硬币

如果第 i 个硬币的面值大于 j，那么第 i 个硬币不能选，即：

dp[i][j] = dp[i-1][j]

否则：

如果选择第 i 个硬币，dp[i][j] = dp[i][j-coins[i-1]]，即用前 i 个硬币组成金额 j 的组合数等于用前 i 个硬币组成金额 j-coins[i-1] 的组合数加上第 i 个硬币。


*** 递归解法

#+begin_src go
package main

import "fmt"

func change(amount int, coins []int) int {
	memo := make([][]int, len(coins)+1)
	for i := range memo {
		memo[i] = make([]int, amount+1)
	}
	// 前 i 个硬币凑成 j 的方法数
	var helper func(i, j int) int
	helper = func(i, j int) int {
		if memo[i][j] != 0 {
			return memo[i][j]
		}
		if i == 0 {
			return 0
		}
		if j == 0 {
			return 1
		}
		// 如果第 i 个硬币的面值大于 j，那么第 i 个硬币不能选
		if coins[i-1] > j {
			memo[i][j] = helper(i-1, j)
			return memo[i][j]
		}
		memo[i][j] = helper(i-1, j) + helper(i, j-coins[i-1])
		return memo[i][j]
	}
	return helper(len(coins), amount)
}

func main() {
	fmt.Println(change(5, []int{1, 2, 5})) // 4
	fmt.Println(change(3, []int{2}))       // 0
	fmt.Println(change(10, []int{10}))     // 1
}
#+end_src
