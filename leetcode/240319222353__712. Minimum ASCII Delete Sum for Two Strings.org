# -*- mode: Org; buffer-read-only: nil; org-download-image-dir: "img"-*-

# local variables:
# eval: (anki-editor-mode +1)
# end:

* 712. Minimum ASCII Delete Sum for Two Strings
:PROPERTIES:
:ANKI_DECK: leetcode
:ANKI_NOTE_TYPE: Basic
:ANKI_TAGS: algorithm dynamic-programming
:ANKI_NOTE_ID: 1710858179480
:END:

** Front

[[https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings][712. Minimum ASCII Delete Sum for Two Strings]]

Given two strings s1 and s2, return the lowest ASCII sum of deleted characters to
make two strings equal.

 

Example 1:


Input: s1 = "sea", s2 = "eat"
Output: 231
Explanation: Deleting "s" from "sea" adds the ASCII value of "s" (115) to the sum.
Deleting "t" from "eat" adds 116 to the sum.
At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.

Example 2:


Input: s1 = "delete", s2 = "leet"
Output: 403
Explanation: Deleting "dee" from "delete" to turn the string into "let",
adds 100[d] + 101[e] + 101[e] to the sum.
Deleting "e" from "leet" adds 101[e] to the sum.
At the end, both strings are equal to "let", and the answer is 100+101+101+101 = 403.
If instead we turned both strings into "lee" or "eet", we would get answers of 433 or 417, which are higher.

 

Constraints:

- 1 <= s1.length, s2.length <= 1000
- s1 and s2 consist of lowercase English letters.


** Back

如果 dp[i][j] 表示 s1 的前 i 个字符和 s2 的前 j 个字符的最小 ASCII 删除和，那么有：

- dp[0][0] = 0

- dp[i][0] = dp[i-1][0] + ord(s1[i-1])

- dp[0][j] = dp[0][j-1] + ord(s2[j-1])

因此，有：

如果 s1[i-1] == s2[j-1]，那么 dp[i][j] = dp[i-1][j-1]

否则，dp[i][j] = min(dp[i-1][j] + ord(s1[i-1]), dp[i][j-1] + ord(s2[j-1]))，即：

(s1 的前 i-1 个字符和 s2 的前 j 个字符的最小 ASCII 删除和 + s1 第 i 个字符 s1[i-1] 的 ASCII 码) 和

(s1 的前 i 个字符和 s2 的前 j-1 个字符的最小 ASCII 删除和 + s2 第 j 个字符 s2[j-1] 的 ASCII 码) 的最小值。


*** 递归解法

#+begin_src go
package main

func minimumASCIIDeleteSum(s1, s2 string) int {
	var helper func(i, j int) int
	// 因为要保存前 0 个字符的结果，所以 memo 的大小要加 1
	memo := make([][]int, len(s1)+1)
	for i := range memo {
		memo[i] = make([]int, len(s2)+1)
	}
	helper = func(i, j int) int {
		if memo[i][j] != 0 {
			return memo[i][j]
		}
		if i == 0 {
			sum := 0
			for k := 0; k < j; k++ {
				sum += int(s2[k])
			}
			memo[i][j] = sum
			return sum
		}
		if j == 0 {
			sum := 0
			for k := 0; k < i; k++ {
				sum += int(s1[k])
			}
			memo[i][j] = sum
			return sum
		}

		if s1[i-1] == s2[j-1] {
			memo[i][j] = helper(i-1, j-1)
			return memo[i][j]
		}
		memo[i][j] = min(int(s1[i-1])+helper(i-1, j), int(s2[j-1])+helper(i, j-1))
		return memo[i][j]
	}
	return helper(len(s1), len(s2))
}

func main() {
	println(minimumASCIIDeleteSum("sea", "eat"))
	println(minimumASCIIDeleteSum("delete", "leet"))
}
#+end_src
