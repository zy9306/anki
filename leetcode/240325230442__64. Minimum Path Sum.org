# -*- mode: Org; buffer-read-only: nil; org-download-image-dir: "img"-*-

# local variables:
# eval: (anki-editor-mode +1)
# end:

* 64. Minimum Path Sum
:PROPERTIES:
:ANKI_DECK: leetcode
:ANKI_NOTE_TYPE: Basic
:ANKI_TAGS: algorithm dynamic-programming
:ANKI_NOTE_ID: 1711381045578
:END:

** Front

[[https://leetcode.com/problems/minimum-path-sum][64. Minimum Path Sum]]

Given a m x n grid filled with non-negative numbers, find a path from top left to
bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


#+DOWNLOADED: screenshot @ 2024-03-25 23:12:02
[[file:img/2024-03-25_23-12-02_screenshot.png]]


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.

Example 2:


Input: grid = [[1,2,3],[4,5,6]]
Output: 12

 

Constraints:

- m == grid.length
- n == grid[i].length
- 1 <= m, n <= 200
- 0 <= grid[i][j] <= 200


** Back

定义 dp[i][j] 为从左上角走到第 i 行第 j 列的最小路径和，则：

- dp[1][1] = grid[0][0]

- dp[i][j] = grid[i-1][j-1] + min(dp[i-1][j], dp[i][j-1])

（这里的 i 和 j 是从 1 开始，后续不需要判断索引负值）

#+begin_src go
package main

import "fmt"

func minPathSum(grid [][]int) int {
	m, n := len(grid), len(grid[0])
	memo := make([][]int, m+1)
	for i := range memo {
		memo[i] = make([]int, n+1)
	}
	var helper func(i, j int) int
	helper = func(i, j int) int {
		if memo[i][j] != 0 {
			return memo[i][j]
		}
		if i == 1 && j == 1 {
			return grid[0][0]
		}
		if i > 1 && j == 1 {
			memo[i][j] = helper(i-1, j) + grid[i-1][j-1]
			return memo[i][j]
		}
		if i == 1 && j > 1 {
			memo[i][j] = helper(i, j-1) + grid[i-1][j-1]
			return memo[i][j]
		}
		memo[i][j] = min(helper(i-1, j), helper(i, j-1)) + grid[i-1][j-1]
		return memo[i][j]
	}
	return helper(m, n)
}

func main() {
	fmt.Println(minPathSum([][]int{{1, 3, 1}, {1, 5, 1}, {4, 2, 1}}))
	fmt.Println(minPathSum([][]int{{1, 2, 3}, {4, 5, 6}}))
}
#+end_src
