# -*- mode: Org; buffer-read-only: nil; org-download-image-dir: "img"-*-

# local variables:
# eval: (anki-editor-mode +1)
# end:

* 10. Regular Expression Matching
:PROPERTIES:
:ANKI_DECK: leetcode
:ANKI_NOTE_TYPE: Basic
:ANKI_TAGS: algorithm dynamic-programming
:ANKI_NOTE_ID: 1710922192681
:END:

** Front

[[https://leetcode.com/problems/regular-expression-matching][10. Regular Expression Matching]]

Given an input string s and a pattern p, implement regular expression matching
with support for '.' and '*' where:

- '.' Matches any single character.​​​​
- '*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

 

Example 1:


Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".

Example 2:


Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".

Example 3:


Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".

 

Constraints:

- 1 <= s.length <= 20
- 1 <= p.length <= 20
- s contains only lowercase English letters.
- p contains only lowercase English letters, '.', and '*'.
- It is guaranteed for each appearance of the character '*', there will be a
 previous valid character to match.


** Back

定义 dp[i][j] 表示 s[:i] 和 p[:j] 是否匹配。

对于 s[i-1] 和 p[j-1]，有以下几种情况（s[:i] 和 p[:j] 对应的最后一个字符的索引为 i-1, j-1）：

1. p[j-1] 不含正则字符，如果 s[i-1] == p[j-1]，dp[i][j] 取决于 dp[i-1][j-1] 是否为真，即 dp[i][j] = dp[i-1][j-1]。

2. p[j-1] 是 '.'，则 dp[i][j] 是否为真取决于 dp[i-1][j-1]，即 dp[i][j] = dp[i-1][j-1]。

3. p[j-1] 是 '*'

   - 如果 '*' 匹配 0 次，dp[i][j] 取决于 dp[i][j-2] 是否为真，即 dp[i][j] = dp[i][j-2]

   - 如果 '*' 匹配 1 次或多次，dp[i][j] = dp[i-1][j] || dp[i][j-2]。

     - dp[i-1][j] 表示 '*' 匹配 1 次，只需要检查前 i-1 个字符是否匹配。
     - dp[i][j-2] 表示 '*' 匹配多次，只需要检查前除去星号和前一个字符的部分是否匹配。


base case：

- dp[0][0] 为 true，即 s 和 p 都为空时，匹配。
- dp[i][0] 为 false，即 p 为空时，不匹配。
- dp[0][j]，即 s 为空时，只有 p 的偶数位为 '*' 时才匹配。
   

#+begin_src go
package main

import "fmt"

func regularExpressionMatching(s, p string) bool {
	i, j := len(s), len(p)
	memo := make([][]*bool, i+1)
	for idx := range memo {
		memo[idx] = make([]*bool, j+1)
	}
	var helper func(int, int) bool
	helper = func(i, j int) bool {
		if memo[i][j] != nil {
			return *memo[i][j]
		}
		if i == 0 && j == 0 {
			return true
		}
		if j == 0 {
			return false
		}
		if i == 0 {
			if j%2 != 0 {
				return false
			}
			for k := 1; k < j; k += 2 {
				if p[k] != '*' {
					return false
				}
			}
			return true
		}
		if p[j-1] == '*' {
			// 星号匹配0次
			if helper(i, j-2) {
				res := true
				memo[i][j] = &res
				return *memo[i][j]
			}
			// 星号匹配1次或多次
			if p[j-2] == '.' || p[j-2] == s[i-1] {
				// 1. 匹配1次，只需要检查前 i-1 个字符是否匹配
				// 2. 匹配多次，只需要检查前除去星号和前一个字符的部分是否匹配
				res := helper(i-1, j) || helper(i, j-2)
				memo[i][j] = &res
				return *memo[i][j]
			}
			memo[i][j] = new(bool)
		}
		if p[j-1] == '.' || p[j-1] == s[i-1] {
			res := helper(i-1, j-1)
			memo[i][j] = &res
			return *memo[i][j]
		}
		memo[i][j] = new(bool)
		return false
	}
	return helper(i, j)
}

func main() {
	fmt.Println(regularExpressionMatching("aa", "a"))
	fmt.Println(regularExpressionMatching("aa", "a*"))
	fmt.Println(regularExpressionMatching("ab", ".*"))
	fmt.Println(regularExpressionMatching("aab", "c*a*b"))
	fmt.Println(regularExpressionMatching("mississippi", "mis*is*p*."))
}
#+end_src
