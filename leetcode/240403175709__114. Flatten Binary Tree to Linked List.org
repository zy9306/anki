# -*- mode: Org; buffer-read-only: nil; org-download-image-dir: "img"-*-

# local variables:
# eval: (anki-editor-mode +1)
# end:

* 114. Flatten Binary Tree to Linked List
:PROPERTIES:
:ANKI_DECK: leetcode
:ANKI_NOTE_TYPE: Basic
:ANKI_TAGS: algorithm tree
:ANKI_NOTE_ID: 1712139463166
:END:

** Front

[[https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/description/][114. Flatten Binary Tree to Linked List]]

给你二叉树的根结点 root ，请你将它展开为一个单链表：

- 展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。
- 展开后的单链表应该与二叉树 先序遍历 顺序相同。


示例 1：

#+DOWNLOADED: screenshot @ 2024-04-03 18:00:20
[[file:img/2024-04-03_18-00-20_screenshot.png]]

输入：root = [1,2,5,3,4,null,6]
输出：[1,null,2,null,3,null,4,null,5,null,6]

示例 2：

输入：root = []
输出：[]

示例 3：

输入：root = [0]
输出：[0]

 
提示：

- 树中结点数在范围 [0, 2000] 内
- -100 <= Node.val <= 100


进阶：你可以使用原地算法（O(1) 额外空间）展开这棵树吗？


** Back

基本思路：把左子树插入到右子树的地方，然后把原来的右子树接到左子树的最右边节点。

#+begin_src go
func flatten(root *TreeNode) {
	if root == nil {
		return
	}
	left := root.Left
	right := root.Right
	root.Left = nil
	root.Right = left
	var p = root
	for p.Right != nil {
		p = p.Right
	}
	p.Right = right
	flatten(root.Left)
	flatten(root.Right)
}
#+end_src
