# -*- mode: Org; buffer-read-only: nil; org-download-image-dir: "img"-*-

# local variables:
# eval: (anki-editor-mode +1)
# end:

* 72 Edit Distance
:PROPERTIES:
:ANKI_DECK: leetcode
:ANKI_NOTE_TYPE: Basic
:ANKI_TAGS: algorithm dynamic-programming
:ANKI_NOTE_ID: 1710771221903
:END:

** Front

[[https://leetcode.com/problems/edit-distance/][72. Edit Distance]]

Given two strings word1 and word2, return the minimum number of operations required
to convert word1 to word2.

You have the following three operations permitted on a word:

- Insert a character
- Delete a character
- Replace a character

 

Example 1:


Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Example 2:


Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')


Constraints:

- 0 <= word1.length, word2.length <= 500
- word1 and word2 consist of lowercase English letters.


** Back

dp[0][0] = 0 表示两个空字符串相等，不需要操作。
dp[i][0] = i 表示将一个字符串变为空字符串需要 i 步操作。
dp[0][j] = j 表示将一个空字符串变为另一个字符串需要 j 步操作。
dp[i][j] 表示将 word1 的前 i 个字符变为 word2 的前 j 个字符需要的最小操作数。

当 word1[i] == word2[j] 时，不需要操作，即 dp[i][j] = dp[i-1][j-1]

当 word1[i] != word2[j] 时，有三种操作：

1. 若已知将 word1 的前 i-1 个字符变为 word2 的前 j-1 个字符需要的最小操作数，即 dp[i-1][j-1]
   则 dp[i][j] = dp[i-1][j-1] + 1，即将 word1[i] 替换为 word2[j] 需要的操作

2. 若已知将 word1 的前 i-1 个字符变为 word2 的前 j 个字符需要的最小操作数，即 dp[i-1][j]
   则 dp[i][j] = dp[i-1][j] + 1，即在 word1[i] 后面添加一个字符
   
3. word1 的前 i 个字符变为 word2 的前 j-1 个字符需要的最小操作数，即 dp[i][j-1]
   则 dp[i][j] = dp[i][j-1] + 1，即删除 word1[i]。


*** 递归实现，从末尾开始比较，直到 base case

#+begin_src go
package main

import "fmt"

// minDistance(words1, words2, i, j) 表示 words1 的前 i 个字符和 words2 的前 j 个字符的编辑距离
func minDistance(words1, words2 string, i, j int, memo [][]int) int {
	if i == 0 {
		return j
	}
	if j == 0 {
		return i
	}
	if memo[i][j] != 0 {
		return memo[i][j]
	}
	// 因为 i, j 表示的是前 i 个字符和前 j 个字符，所以索引要减 1
	if words1[i-1] == words2[j-1] {
		memo[i][j] = minDistance(words1, words2, i-1, j-1, memo)
		return memo[i][j]
	}
	memo[i][j] = 1 + min(
		minDistance(words1, words2, i-1, j, memo),
		minDistance(words1, words2, i, j-1, memo),
		minDistance(words1, words2, i-1, j-1, memo),
	)
	return memo[i][j]
}

func main() {
	s1 := "horse"
	s2 := "ros"
	// 因为还要保存前 0 个字符的编辑距离作为 base case，所以 memo 的长度要加 1
	memo := make([][]int, len(s1)+1)
	for i := range memo {
		memo[i] = make([]int, len(s2)+1)
	}
	fmt.Println(minDistance(s1, s2, len(s1), len(s2), memo))

	s1 = "intention"
	s2 = "execution"
	memo = make([][]int, len(s1)+1)
	for i := range memo {
		memo[i] = make([]int, len(s2)+1)
	}
	fmt.Println(minDistance(s1, s2, len(s1), len(s2), memo))
}
#+end_src


*** TODO 动态规划实现

*** TODO 得到具体的操作步骤
