# -*- mode: Org; buffer-read-only: nil; org-download-image-dir: "img"-*-

# local variables:
# eval: (anki-editor-mode +1)
# end:

* 654. Maximum Binary Tree
:PROPERTIES:
:ANKI_DECK: leetcode
:ANKI_NOTE_TYPE: Basic
:ANKI_TAGS: algorithm tree
:ANKI_NOTE_ID: 1712141363089
:END:

** Front

[[https://leetcode.com/problems/maximum-binary-tree/description/][654. Maximum Binary Tree]]


给定一个不重复的整数数组 nums 。 最大二叉树 可以用下面的算法从 nums 递归地构建:

- 创建一个根节点，其值为 nums 中的最大值。
- 递归地在最大值 左边 的 子数组前缀上 构建左子树。
- 递归地在最大值 右边 的 子数组后缀上 构建右子树。

返回 nums 构建的 最大二叉树 。


示例 1：


#+DOWNLOADED: screenshot @ 2024-04-03 18:46:38
[[file:img/2024-04-03_18-46-38_screenshot.png]]

输入：nums = [3,2,1,6,0,5]
输出：[6,3,5,null,2,0,null,null,1]
解释：递归调用如下所示：
- [3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。
    - [3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。
        - 空数组，无子节点。
        - [2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。
            - 空数组，无子节点。
            - 只有一个元素，所以子节点是一个值为 1 的节点。
    - [0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。
        - 只有一个元素，所以子节点是一个值为 0 的节点。
        - 空数组，无子节点。

示例 2：


#+DOWNLOADED: screenshot @ 2024-04-03 18:48:26
[[file:img/2024-04-03_18-48-26_screenshot.png]]


输入：nums = [3,2,1]
输出：[3,null,2,null,1]


提示：

- 1 <= nums.length <= 1000
- 0 <= nums[i] <= 1000
- nums 中的所有整数 互不相同


** Back

*** 递归

#+begin_src go
func constructMaximumBinaryTree(nums []int) *TreeNode {
	if len(nums) == 0 {
		return nil
	}
	maxVal := math.MinInt
	idx := 0
	for i, v := range nums {
		if v > maxVal {
			maxVal = v
			idx = i
		}
	}

	root := &TreeNode{Val: maxVal}
	root.Left = constructMaximumBinaryTree(nums[0:idx])
	root.Right = constructMaximumBinaryTree(nums[idx+1:])
	return root
}
#+end_src


*** TODO 单调栈
